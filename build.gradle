subprojects {
    version = '1.0'
}

task clean(type: Delete){
  delete 'bin'
}

task devclient(){
  dependsOn(":client:doBuild")
}

task devserver(){
  dependsOn(":server:doBuild")
}

task devbuild(){
  dependsOn devclient
  dependsOn devserver
}

boolean pythonFound = false
String pythonCommand = ""


task checkVersion(){
  doLast{
    String[] pythonCommands = ["python3.6","python3","python"]
    ByteArrayOutputStream stdout = new ByteArrayOutputStream()
    for (int i = 0; i < pythonCommands.length; i++){
      try{
        exec{
          commandLine pythonCommands[i],'--version'
          standardOutput = stdout
        }
        if(stdout.toString().contains('Python 3.6')){
          pythonCommand = pythonCommands[i]
          pythonFound = true
          break
        }
      }catch(Exception e){
        println 'No Command ' + pythonCommands[i] + ' continuing check'
      }
    }
    if(!pythonFound){
      throw new GradleException("No valid python3.6 installation found, building failed")
    }else{
      println "Found python 3.6 with command " + pythonCommand
    }
  }
}

String[] required = ["pylama", "Sphinx"]
Boolean[] installed = [false, false]
task checktools(dependsOn:checkVersion, type:Exec){
    doFirst{
      executable = pythonCommand
    }
    args = ["-m","pip","list","--format","columns"]
    ignoreExitValue = true
    standardOutput = new ByteArrayOutputStream()
    doLast{
      String result = standardOutput.toString()
      for(int i=0; i<required.length;i++){
        if(result.contains(required[i])){
          installed[i] = true
        }
      }
    }
  }

task installTools(){
  dependsOn checktools
  doLast{
    for(int i=0; i<required.length; i++){
      if(!installed[i]){
        exec{
            executable = pythonCommand
            args = ["-m","pip","install",required[i]]
            standardOutput = new ByteArrayOutputStream()
        }
      }
    }
  }
}

task document(){
  dependsOn installTools
  doFirst{
    copy{
    from 'documentation/core'
    into 'documentation/source'
    }
    exec{
      standardOutput = new ByteArrayOutputStream()
      commandLine 'sphinx-apidoc','-o','documentation/source','shared/src'
    }
    exec{
      standardOutput = new ByteArrayOutputStream()
      commandLine 'sphinx-apidoc','-o','documentation/source','server/src'
    }
    exec{
      standardOutput = new ByteArrayOutputStream()
      commandLine 'sphinx-apidoc','-o','documentation/source','client/src'
    }
  }
  doLast{
    exec{
      commandLine 'sphinx-build','documentation/source','documentation/output'
    }
  }
}

task lint(type:Exec){
  dependsOn installTools
  commandLine 'pylama'
  ignoreExitValue = true
}
